public class Ex1 {
  int x = 99;
  static int y = 100;
  public void showY() {
    System.out.println("y is " + y);
  }
}

Ex1 ex1 = new Ex1();
ex1.showY();

a) compilation fails
b) 100
c) 99
d) exception

-------------------------------------------

  class X {
    static int MAX_VAL = 100;
    int value = 99;
    public void setVal(int x) {
      if (x <= MAX_VAL) value = x;
    }
  }
  public void q2() {
    X a = new X();
    X b = new X();
    a.setVal(120);
    System.out.print(a.value + ", ");
    b.MAX_VAL = 150;
    a.setVal(140);
    System.out.println(a.value);
    /*
    What is the result?
    A) 99, 99
    B) 120, 140
    C) 99, 140
    D) Compilation failure
    E) Exception at runtime
     */
  }

--------------------------------------

class X {
  int x = 99;
  static void doStuff(X anX) {
    sout("value of x is " + anX.x);
  }
}

X anX = new X();
X.doStuff(anX);

/*
a) ... 99
b) compile error
c) runtime error
*/

----------------------------------------

  class Y {
    static String sayHi() {
      return "Y-Hello";
    }
    String sayHi2() {
      return "Y-Hello2";
    }
  }

  class Z extends Y {
    static String sayHi() {
      return "Z-Hello";
    }
    String sayHi2() {
      return "Z-Hello2";
    }
  }

  public void q4() {
    Y y = new Z();
    System.out.println(y.sayHi() + ", " + y.sayHi2());
    /*
    What is the result?
    A) Y-Hello, Y-Hello2
    B) Y-Hello, Z-Hello2
    C) Z-Hello, Z-Hello2
    D) Z-Hello, Y-Hello2
    E) Compilation fails
     */
  }

------------------------------------
  class Base {
    void doBaseStuff() {
      System.out.println("doBaseStuff");
    }
  }

  class Sub extends Base {
    void doBaseStuff() {
      System.out.println("doSubStuff");
    }
    void doOtherStuff() {
      System.out.println("doOtherStuff");
    }
  }

  public void q15() {
    Base b = new Sub();
    b.doOtherStuff();
    /*
    What is the result?
    A) doSubStuff
    B) doOtherStuff
    C) doBaseStuff
    D) Exception at runtime
    E) Compilation failure
     */
  }

--------------------------------------------------

    Base b = new Sub();
    ((Sub)b).doOtherStuff();
    /*
    What is the result?
    A) doSubStuff
    B) doOtherStuff
    C) doBaseStuff
    D) Exception at runtime
    E) Compilation failure
     */
  }

----------------------------------------------------


    Base b = new Sub();
    ((Runnable)b).run();
    /*
    What is the result?
    A) doSubStuff
    B) doOtherStuff
    C) doBaseStuff
    D) Exception at runtime
    E) Compilation failure
     */
  }

----------------------------------------------------

1. short s1 = 3;
2. short s2 = 128;
3. short s3 = s1 + s2;
4. s.o.p(s3)

what is the result
a) 131
b) Compilation error at line 2
c) Compilation error at line 3
d) Runtime error
e) "strange result"

------------------------------------------------------
package x.y;
class Q22 {
    public int getValue() {return 1;}
    /*
    which of these methods may individually be added
    to a subclass of this class?
    A) public int getValue(int x) {return 1;}
    B) public String getValue() {return "Hello";}
    C) public String getValue(int x) {return "Hello";}
    D) A), B), and C)
    E) A), and C)
    */
  }

A) is a different method (overload) because arg list is different OK!
B) is "same" method (same name and arg list, therefore override) but return is
   surprising!!! NOT OK
C) is a different method (overload) because arg list is different, return is not
   a problem OK!

------------------------------------------------------

1. public void doStuff() {
2.   if (Math.random() > 0.5) throw new RuntimeException();
3. }

what happens:

a) compiler error at line 1
b) compiler error at line 2
c) class cast exeption at line 2
d) runs normally, or not, randomly...

------------------------------------------------------

class Base {
  public void doStuff() { // l3
    if (Math.random() > 0.5) throw new RuntimeException();
  }
}
class Sub extends Base {
  public void doStuff() throws Exception { // l2
    if (Math.random() > 0.5) throw new IOException(); // l1
  }
}

/* Imagine!....
  Base b = new Sub();
  b.doStuff(); // compiler believes this is OK; 
               // no checked exception, therefore no handling required!
               // THIS WOULD BREAK the checked exception checking
               // It is a "surprise" in an overriding method	
*/


what happens
a) "works"
b) fails at l1
c) fails at l2
d) fails at l3

what happens:

------------------------------------------------------

class Base {
  public void doStuff() { // l3
  }
}
class Sub extends Base { // l1
  void doStuff() { // l2
  }
}
/* Imagine!....
  Base b = new Sub();
  b.doStuff(); // compiler believes this is OK;
  // NOT allowed to make overriding methods LESS accessible than
  // their "parent" method
*/



what happens:
a) compiles OK
b) comp fails at l1
c) comp fails at l2
d) comp fails at l3

------------------------------------------------------

class Base {
  private int value;
  public Base(int x) { // l2
    this.value = x;
  }
}
class Sub extends Base { // l1
}

Base b = new Sub(); // l3

what happens?
a) "works"
b) comp fails at l1
c) comp fails at l2
d) comp fails at l3

------------------------------------------------------

class Base {
  private int value;
  public Base() {
    this(3); // l1
    super(); // l3
  }

  public Base(int x) { // l2
    this.value = x;
  }
}

what happens?
a) "works"
b) comp fails at l1
c) comp fails at l2
d) comp fails at l3

---------------------------------------------
    final StringBuilder sb = new StringBuilder("Hello");
    sb.append(" world!");
    System.out.println(sb);

    /*
    What is the result?
    A) Compilation fails
    B) Hello
    C) Hello world!
    D) Exception at runtime
     */
  }


---------------------------------------------

    final String s = new String("Hello");
    s.concat(" world!");
    System.out.println(s);

    /*
    What is the result?
    A) Compilation fails
    B) Hello
    C) Hello world!
    D) Exception at runtime
     */
  }

---------------------------------------------

    final String s = new String("Hello");
    s = s.concat(" world!");
    System.out.println(s);

    /*
    What is the result?
    A) Compilation fails
    B) Hello
    C) Hello world!
    D) Exception at runtime
     */
  }

---------------------------------------------

    final int x = 99;
    x++;
    System.out.println(x);

    /*
    What is the result?
    A) Compilation fails
    B) 99
    C) 100
    D) Exception at runtime
     */
  }

----------------------------------------------

  public void q8() {
    StringBuilder sb1 = new StringBuilder("Hello");
    StringBuilder sb2 = sb1;
    sb1 = null;
    /*
    Which is true?
    A) sb1 is unreferenced and eligible for GC
    B) sb1 and sb2 are unreferenced and eligible for GC
    C) No objects are eligible for GC
     */
  }

----------------------------------------------

    StringBuilder sb1 = new StringBuilder("Hello");
    StringBuilder sb2 = new StringBuilder("World");
    sb1 = null;
    sb2 = sb1;
    /*
    Which is true?
    A) Object containing "Hello" is unreferenced and eligible for GC
    B) Object containing "World" is unreferenced and eligible for GC
    C) Object containing "Hello", and "World" are both unreferenced and eligible for GC
    D) No objects are eligible for GC
     */

----------------------------------------------

public StringBuilder getOne() {
  StringBuilder s = new StringBuilder("Hello")
  //...
  return s;
}

StringBuilder sb = new StringBuilder("Bonjour");
sb = getOne();

Which is true:
A) No objects are eligible for GC
B) Hello, and Bonjour are eligible for GC
C) Hello is eligible
D) Bonjour is eligible

-----------------------------------------------

public class RunTimeDemo {
   public static BiFunction<Integer, Integer, Integer> userPlus = (t, a) -> t + a;
   public static BiFunction<Integer, Integer, Integer> userMultiply = (t, a) -> t * a;
   public static void main(String[] args) {
      BiFunction runTimeBiFunction = userPlus;
      System.out.println(runTimeBiFunction.equals(userMultiply));
      System.out.println(runTimeBiFunction.equals(userPlus));
      System.out.println(runTimeBiFunction == userMultiply);
      System.out.println(runTimeBiFunction == userPlus);
   }
}

What is the output:
A) true, true, true, true
B) true, false, true, false
C) false, true, false, true
D) false, false, true, true
E) false, false, false, false

-----------------------------------------------

StringBuilder sb1 = new StringBuilder("Hello");
StringBuilder sb2 = new StringBuilder("Hello");
sout(sb1 == sb2)
sout(sb1.equals(sb2))

A) true, true
B) false, false
C) true, false
D) false, true

-----------------------------------------------
  public void q11A(int x) {
    x = x + 1;
  }
  public void q11() {
    int x = 99;
    q11A(x);
    System.out.println(x);
    /* What is the result?
    A) 99
    B) 100
    C) An error
     */
  }
------------------------------------------------
  public void q12A(StringBuilder x) {
    x.append(" world");
  }

  public void q12() {
    StringBuilder x = new StringBuilder("Hello");
    q12A(x);
    System.out.println(x);
    /* What is the result?
    A) Hello
    B) Hello world
    C)  world
    D) An error
     */
  }

-------------------------------------------------

  public void q10() {
    int x;
    System.out.println(x);
    /*
    What is the result?
    A) 0
    B) Random number printed
    C) Exception at runtime
    D) Compilation fails
     */
  }

-------------------------------------------------
class Q10 {
  int x;
}
  public void q10() {
    Q10 x = new Q10();
    System.out.println(x.x);
    /*
    What is the result?
    A) 0
    B) Random number printed
    C) Exception at runtime
    D) Compilation fails
     */
  }

